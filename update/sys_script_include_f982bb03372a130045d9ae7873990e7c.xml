<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_144441_badminton.ServerSideTools</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ServerSideTools</name>
        <script><![CDATA[var ServerSideTools = Class.create();
ServerSideTools.prototype = {
	initialize: function() {
	},

	getSysIdFromURL: function(sURL) {
		var iSysId = sURL.indexOf('sys_id=');
		var sResult = (iSysId != -1) ? sURL.substring(iSysId+7, iSysId+39) : '';
		return sResult;
	},

	checkParticipantDelete: function(sParticipant) {
		gs.info('ServerSideTools.checkParticipantDelete sParticipant: ' + sParticipant);
		var grParticipantCategoryMap = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grParticipantCategoryMap.addQuery('badminton_m2m_players_tournaments', sParticipant);
		grParticipantCategoryMap.query();
		if (!grParticipantCategoryMap.next()) {
			var grParticipant = new GlideRecord('x_144441_badminton_m2m_players_tournaments');
			if (grParticipant.get(sParticipant)) {
				grParticipant.setValue('state', '0');
				grParticipant.update();
			} // if participant
		} // if no participant category map
	},

	setPartner: function(sParticipant, sPartner, sCategory, sAction) {
		gs.info('ServerSideTools.setPartner sPartner: ' + sPartner + ' sParticipant: ' + sParticipant + ' sCategory: ' + sCategory + ' sAction: ' + sAction);
		var grParticipantCategoryMap = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grParticipantCategoryMap.setWorkflow(false);
		grParticipantCategoryMap.addQuery('category', sCategory);
		grParticipantCategoryMap.addQuery('badminton_m2m_players_tournaments', sPartner);
		if (sAction == 'remove') {
			grParticipantCategoryMap.addQuery('partner', sParticipant);
		} // if remove
		grParticipantCategoryMap._query();
		if (grParticipantCategoryMap._next()) {
			if (sAction == 'remove') {
				grParticipantCategoryMap.deleteRecord();
				gs.info('ServerSideTools.setPartner DELETE');
			} else if (sAction == 'add') {
				grParticipantCategoryMap.setValue('partner', sParticipant);
				grParticipantCategoryMap.update();
				gs.info('ServerSideTools.setPartner UPDATE');
			} // if action
		} else if (sAction == 'add') {
			grParticipantCategoryMap.setValue('category', sCategory);
			grParticipantCategoryMap.setValue('badminton_m2m_players_tournaments', sPartner);
			grParticipantCategoryMap.setValue('partner', sParticipant);
			grParticipantCategoryMap.setValue('main_contact', false);
			grParticipantCategoryMap.insert();
			gs.info('ServerSideTools.setPartner INSERT');
		} else {
			gs.error('ServerSideTools.setPartner Action "remove" failed because the partner could not be found.');
		} // if participant category map found
	},

	getPartnerQuery: function(sUser, sGender, sCat, sCatGender, sCatType, sTournament, iMaxChildAge) {
		var aQuery = [];
		if ((sCatGender) && (sCatGender != 'mixed')) {
			aQuery.push('user.gender=' + sCatGender);
		} else if (sCatGender == 'mixed') {
			aQuery.push('user.gender!=' + sGender);
		} else {
			aQuery.push('year>' + String(Number(new Date().getFullYear()) - iMaxChildAge));
		} // if gender same or mixed or child
		var aParticipant = [];
		aParticipant.push(sUser); // cannot select self
		var grParticipantCategoryMap = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grParticipantCategoryMap.addQuery('badminton_m2m_players_tournaments.tournament', sTournament);
		grParticipantCategoryMap.addQuery('category.type', sCatType);
		grParticipantCategoryMap.addNotNullQuery('partner');
		grParticipantCategoryMap.query();
		while (grParticipantCategoryMap.next()) {
			aParticipant.push(String(grParticipantCategoryMap.partner.player));
		} // each participant which has already a partner
		aQuery.push('sys_idNOT IN' + aParticipant.join(','));
		//gs.info('ServerSideTools.getPartnerQuery sUser: ' + sUser + ' sGender: ' + sGender + ' sCat: ' + sCat + ' sCatGender: ' + sCatGender + ' sTournament: ' + sTournament + ' query: ' + aQuery.join('^'));
		return aQuery.join('^');
	},

	getHeaderData: function(bLoggedIn, sUser, sPage) {
		gs.info('ServerSideTools.getRegistrationData bLoggedIn: ' + bLoggedIn + ' sUser: ' + sUser + ' sPage: ' + sPage);
		var oRet = {success: '', info: '', message: '', title: '', bLoggedIn: false, user: sUser, userName: gs.getUserDisplayName(), html: ''};
		var grTournament = new GlideRecord('x_144441_badminton_tournament');
		grTournament.addActiveQuery();
		grTournament.orderByDesc('start_time');
		grTournament.query();
		if (grTournament.next()) {
			oRet.title = grTournament.getValue('short_description');
			oRet.html = grTournament.getValue('description');
			oRet.info = grTournament.address.getLabel() + '\n' + grTournament.getDisplayValue('address') + '\n';
			oRet.info += grTournament.start_time.getLabel() + ': ' + grTournament.getDisplayValue('start_time') + '\n';
			oRet.info += grTournament.end_time.getLabel() + ': ' + grTournament.getDisplayValue('end_time') + '\n';
		} else {
			oRet.message = gs.getMessage('Currently there is no active tournament!');
		} // if tournament
		return oRet;
	},

	getAccountData: function(bLoggedIn, sUser, sAction) {
		var oRet = {success: '', info: '', message: '', title: 'Account', bLoggedIn: bLoggedIn, userfirst: '', userlast: '', useremail: '', usergender: '', useryear: '', redirect: ''};
		if (sAction == 'create') {
			oRet.title = gs.getMessage('Create Account');
		} else if (data.bLoggedIn == false) {
			oRet.redirect("\bck?id=btp_login");
		} else {
			oRet.title = gs.getMessage('Edit Account');
			var grPlayer = new GlideRecord('x_144441_badminton_player');
			grPlayer.addQuery('user', sUser);
			grPlayer.query();
			if (grPlayer.next()) {
				oRet.userfirst = grPlayer.user.first_name.getDisplayValue();
				oRet.userlast = grPlayer.user.last_name.getDisplayValue();
				oRet.useremail = grPlayer.user.email.getDisplayValue();
				oRet.usergender = String(grPlayer.user.gender);
				oRet.useryear = grPlayer.getValue('year');
			} else {
				oRet.redirect("\bck?id=btp_overview");
			} // if user
		} // if action
		return oRet;
	},

	setAccountData: function(oInput, sAction) {
		//gs.info('ServerSideTools.setAccountData sUser: ' + JSON.stringify(oInput));
		var oRet = {message: '', success: ''};
		if (oInput.action == 'submit') {
			var bInsert = true;
			var grUser = new GlideRecord('sys_user');
			var grPlayer = new GlideRecord('x_144441_badminton_player');
			grUser.addQuery('user_name', oInput.useremail);
			grUser.query();
			if (grUser.next()) {
				if (sAction == 'create') {
					oRet.message = gs.getMessage('User already exists, cannot insert!');
					return oRet;
				} // if create
				grPlayer.addQuery('user', grUser.getUniqueValue());
				grPlayer.query();
				grPlayer.next();
				bInsert = false;
			} // if new user
			grUser.setValue('user_name', oInput.useremail);
			grUser.setValue('first_name', oInput.userfirst);
			grUser.setValue('last_name', oInput.userlast);
			grUser.setValue('email', oInput.useremail);
			grUser.setValue('gender', oInput.usergender);
			grPlayer.setValue('name', oInput.userfirst + ' ' + oInput.userlast + ' (' + oInput.useryear + ')');
			grPlayer.setValue('year', oInput.useryear);
			if (bInsert) {
				grUser.insert();
				grPlayer.setValue('user', grUser.getUniqueValue());
				grPlayer.insert();
			} else {
				grUser.update();
				grPlayer.update();
			} // if insert
		} // if action
		if (!oRet.message) {
			oRet.success = gs.getMessage('Successfully Saved!');
		} // if no message
		//gs.info('ServerSideTools.setAccountData oRet: ' + JSON.stringify(oRet));
		return oRet;
	}, // function set registration


	getRegistrationData: function(sUser) {
		//gs.info('ServerSideTools.getRegistrationData sUser: ' + sUser);
		var oRet = {success: '', info: '', message: '', title: '', user: '', gender: '', player: '', skilllevel: '', skilllevel_readonly: false, tournament: '', categories: []};
		oRet.user = sUser;
		var grUser = new GlideRecord('sys_user');
		grUser.get(oRet.user);
		oRet.gender = grUser.getValue('gender');
		var grPlayer = new GlideRecord('x_144441_badminton_player');
		grPlayer.addQuery('user', oRet.user);
		grPlayer.query();
		grPlayer.next();
		oRet.player = grPlayer.getUniqueValue();
		var grTournament = new GlideRecord('x_144441_badminton_tournament');
		grTournament.addActiveQuery();
		grTournament.query();
		if (!grTournament.next()) {
			oRet.message = gs.getMessage('Currently there is no active tournament');
			return;
		} // if tournament
		oRet.tournament = grTournament.getUniqueValue();
		oRet.max_child_age = grTournament.getValue('max_child_age');
		oRet.title = gs.getMessage('Registration for') + ' ' + grTournament.getValue('short_description');
		var grParticipant = new GlideRecord('x_144441_badminton_m2m_players_tournaments');
		grParticipant.addQuery('player', grPlayer.getUniqueValue());
		grParticipant.addQuery('tournament', oRet.tournament);
		grParticipant.query();
		grParticipant.next();
		var grRegisteredCategories;
		var grCategories = new GlideRecord('x_144441_badminton_m2m_categories_tournaments');
		grCategories.addQuery('tournament', oRet.tournament);
		grCategories.query();
		var sTmpQuery = '';
		var oPartner = {};
		var aPartnerCategories = [];
		var sSkillLevel = '';
		var bSelected = false;
		var bReadonly = false;
		while (grCategories.next()) {
			bSelected = false;
			bReadonly = false;
			sTmpQuery = '';
			oPartner = {name: 'partner'};
			if (grCategories.category.type == 'double') {
				sTmpQuery =  this.getPartnerQuery(oRet.player, oRet.gender, grCategories.category.sys_id, grCategories.category.gender, grCategories.category.type, oRet.tournament, oRet.max_child_age);
			} // if double
			grRegisteredCategories = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
			grRegisteredCategories.addQuery('badminton_m2m_players_tournaments', grParticipant.getUniqueValue());
			grRegisteredCategories.addQuery('category', grCategories.category);
			grRegisteredCategories.query();
			if (grRegisteredCategories.next()) {
				bSelected = true;
				if ((grCategories.category.type == 'double') && (grRegisteredCategories.getValue('main_contact') == false)) {
					oRet.info = gs.getMessage('You have already been registered by a partner for the double competion. Only your partner can change this registration.');
					bReadonly = true;
					aPartnerCategories.push({gender: grCategories.category.gender, skilllevel: grCategories.category.skilllevel});
				} else {
					oRet.skilllevel_readonly = true;
				} // if partner registered
				sSkillLevel = (sSkillLevel) ? sSkillLevel : String(grCategories.category.skilllevel);
				oPartner = {name: 'partner', displayValue: String(grRegisteredCategories.partner.player.name), value: String(grRegisteredCategories.partner.player.sys_id)};
			} // if registered
			oRet.categories.push({readonly: bReadonly, id: String(grCategories.category), name: grCategories.category.getDisplayValue('name'), gender: String(grCategories.category.gender), skilllevel: String(grCategories.category.skilllevel), type: String(grCategories.category.type), partner: oPartner, selected: bSelected, query: sTmpQuery});
		} // while categories in tournament
		for (var i = oRet.categories.length - 1; i >= 0; --i) {
			for (var ii = aPartnerCategories.length - 1; ii >= 0; --ii) {
				if ((oRet.categories[i].type == 'double') && (oRet.categories[i].gender == aPartnerCategories[ii].gender) && (oRet.categories[i].skilllevel != aPartnerCategories[ii].skilllevel)) {
					oRet.categories.splice(i,1);
				} // if found remove
			} // for partner categories
		} // for categories
		oRet.skilllevel = sSkillLevel;
		//gs.info('ServerSideTools.getRegistrationData oRet: ' + JSON.stringify(oRet));	
		return oRet;
	}, // function get registration

	setRegistrationData: function(oInput) {
		//gs.info('ServerSideTools.setRegistrationData sUser: ' + JSON.stringify(oInput));
		var oRet = {message: '', success: ''};
		if (oInput.action == 'submit') {
			var grParticipant = new GlideRecord('x_144441_badminton_m2m_players_tournaments');
			grParticipant.addQuery('player', oInput.player);
			grParticipant.addQuery('tournament', oInput.tournament);
			grParticipant.query();
			if (!grParticipant.next()) {
				grParticipant.setValue('tournament', oInput.tournament);
				grParticipant.setValue('player', oInput.player);
				grParticipant.setValue('state', '1');
				grParticipant.setValue('payment', false);
				grParticipant.insert();
			} else if (grParticipant.getValue('state') == '0') {
				grParticipant.setValue('state', '1');
				grParticipant.update();
			} // if participant
			var grRegisteredCategories = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
			var aValidRegisteredCategories = [];
			oInput.categories.forEach(function(oCategory) {
				if ((oCategory.selected == true) && (oCategory.readonly == false)) {
					grRegisteredCategories = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
					grRegisteredCategories.addQuery('badminton_m2m_players_tournaments', grParticipant.getUniqueValue());
					grRegisteredCategories.addQuery('category', oCategory.id);
					grRegisteredCategories.query();
					grRegisteredCategories.setValue('badminton_m2m_players_tournaments', grParticipant.getUniqueValue());
					gs.info('ServerSideTools.setRegistrationData oCategory.type: ' + oCategory.type + ' oCategory.partner.value: ' + oCategory.partner.value);
					if ((oCategory.type == 'double') && (oCategory.partner.value)) {
						var grPartner = new GlideRecord('x_144441_badminton_m2m_players_tournaments');
						grPartner.addQuery('player', oCategory.partner.value);
						grPartner.addQuery('tournament ', oInput.tournament);
						grPartner.query();
						if (!grPartner.next()) {
							grPartner.setValue('tournament', oInput.tournament);
							grPartner.setValue('player', oCategory.partner.value);
							grPartner.setValue('state', '1');
							grPartner.setValue('payment', false);
							grPartner.insert();
							gs.info('ServerSideTools.setRegistrationData grPartner.insert()');
						} else if (grPartner.getValue() == '0') {
							grPartner.setValue('state', '1');
							grPartner.update();
						} // if partner
						gs.info('ServerSideTools.setRegistrationData grPartner: ' + grPartner.getUniqueValue());
						grRegisteredCategories.setValue('partner', grPartner.getUniqueValue());
					} // if partner
					if (grRegisteredCategories.next()) {
						if (!grRegisteredCategories.update()) {
							oRet.message += 'Error updating registration!\n';
						} else {
							gs.info('ServerSideTools.setRegistrationData update: ' + grRegisteredCategories.getDisplayValue() + ' partner: ' + grRegisteredCategories.getValue('partner'));
						} // if not success
					} else {
						grRegisteredCategories.setValue('main_contact', true);
						grRegisteredCategories.setValue('category', oCategory.id);
						gs.info('ServerSideTools.setRegistrationData insert: ' + oCategory.name);
						if (!grRegisteredCategories.insert()) {
							oRet.message += 'Error inserting registration!\n';
						} // if not success
					} // if registration exists
					aValidRegisteredCategories.push(grRegisteredCategories.getUniqueValue());
				} // if valid category
			}); // each category
			grRegisteredCategories = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
			grRegisteredCategories.addQuery('badminton_m2m_players_tournaments', grParticipant.getUniqueValue());
			grRegisteredCategories.addQuery('main_contact', true);
			grRegisteredCategories.addEncodedQuery('sys_idNOT IN' + aValidRegisteredCategories.join(','));
			grRegisteredCategories.query();
			while (grRegisteredCategories.next()) {
				gs.info('ServerSideTools.setRegistrationData remove: ' + grRegisteredCategories.getDisplayValue());
				if (!grRegisteredCategories.deleteRecord()) {
					oRet.message += gs.getMessage('Error removing registration!') + '\n';
				} // if not success
			} // while remove
		} // if action
		if (!oRet.message) {
			oRet.success = gs.getMessage('Successfully Saved!');
		} // if no message
		//gs.info('setRegistrationData oRet: ' + JSON.stringify(oRet));
		return oRet;
	}, // function set registration

	type: 'ServerSideTools'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom</sys_created_by>
        <sys_created_on>2018-06-12 06:25:27</sys_created_on>
        <sys_id>f982bb03372a130045d9ae7873990e7c</sys_id>
        <sys_mod_count>102</sys_mod_count>
        <sys_name>ServerSideTools</sys_name>
        <sys_package display_value="Badminton Tournament Planner" source="x_144441_badminton">681664313722130045d9ae7873990e88</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Badminton Tournament Planner">681664313722130045d9ae7873990e88</sys_scope>
        <sys_update_name>sys_script_include_f982bb03372a130045d9ae7873990e7c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-10 21:17:53</sys_updated_on>
    </sys_script_include>
</record_update>
