<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_144441_badminton.ServerSideTools</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ServerSideTools</name>
        <script><![CDATA[var ServerSideTools = Class.create();
ServerSideTools.prototype = {
	initialize: function() {
	},

	getSysIdFromURL: function(sURL) {
		var iSysId = sURL.indexOf('sys_id=');
		var sResult = (iSysId != -1) ? sURL.substring(iSysId+7, iSysId+39) : '';
		return sResult;
	},

	_setParticipant: function(sParticipant, sPlayer, sTournament, bActive) {
		var sState = (bActive === true) ? '1' : '0';
		gs.info('ServerSideTools._setParticipant sParticipant: ' + sParticipant + ' sPlayer: ' + sPlayer + ' sTournament: ' + sTournament + ' sState: ' + sState);
		var grParticipant = new GlideRecord('x_144441_badminton_m2m_players_tournaments');
		if (!grParticipant.get(sParticipant)) {
			grParticipant.addQuery('player', sPlayer);
			grParticipant.addQuery('tournament', sTournament);
			grParticipant.query();
			grParticipant.next();
		}  // if get participant
		if (!grParticipant.isValidRecord()) {
			grParticipant.setValue('tournament', sTournament);
			grParticipant.setValue('player', sPlayer);
			grParticipant.setValue('state', sState);
			grParticipant.setValue('payment', false);
			grParticipant.setValue('name', grParticipant.tournament.getDisplayValue() + ' / ' + grParticipant.player.getDisplayValue());
			grParticipant.insert();
			gs.info('ServerSideTools._setParticipant insert: ' + grParticipant.getDisplayValue() + ' (' + grParticipant.getUniqueValue() + ')');
		} else if (grParticipant.getValue('state') != sState) {
			grParticipant.setValue('state', sState);
			grParticipant.update();
			gs.info('ServerSideTools._setParticipant update: ' + grParticipant.getDisplayValue() + ' (' + grParticipant.getUniqueValue() + ')');
		} // if participant new or state changed
		return grParticipant.getUniqueValue();
	}, // _setParticipant

	_setParticipantCategoryMap: function(sParticipant, sCategory, sPartner, bMainContact, bActive) {
		sAction = (bActive === true) ? 'add' : 'remove';
		gs.info('ServerSideTools._setParticipantCategoryMap sParticipant: ' + sParticipant + ' sCategory: ' + sCategory + ' sPartner: ' + sPartner + ' bMainContact: ' + bMainContact + ' sAction: ' + sAction);
		bMainContact = (bMainContact === true) ? true : false;
		var grParticipantCategoryMap = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grParticipantCategoryMap.addQuery('badminton_m2m_players_tournaments', sParticipant);		
		grParticipantCategoryMap.addQuery('category', sCategory);
		grParticipantCategoryMap.query();
		if ((!grParticipantCategoryMap.next()) && (sAction == 'add')) {
			grParticipantCategoryMap.setValue('category', sCategory);
			grParticipantCategoryMap.setValue('badminton_m2m_players_tournaments', sParticipant);
			if (sPartner) {
				grParticipantCategoryMap.setValue('partner', sPartner);
			} // if partner
			grParticipantCategoryMap.setValue('main_contact', bMainContact);
			grParticipantCategoryMap.insert();
			gs.info('ServerSideTools._setParticipantCategoryMap insert: ' + grParticipantCategoryMap.getDisplayValue() + ' (' + grParticipantCategoryMap.getUniqueValue() + ')');
		} else if (grParticipantCategoryMap.isValidRecord()) {
			if (sAction != 'remove') {
				grParticipantCategoryMap.setValue('partner', sPartner);
				grParticipantCategoryMap.setValue('main_contact', bMainContact);
				grParticipantCategoryMap.update();
			} else {
				grParticipantCategoryMap.deleteRecord();
				this._checkParticipantDelete(sParticipant);
				gs.info('ServerSideTools._setParticipantCategoryMap delete: ' + grParticipantCategoryMap.getDisplayValue() + ' (' + grParticipantCategoryMap.getUniqueValue() + ')');
			} // if update or remove
		} // if insert
		return grParticipantCategoryMap.getUniqueValue();
	},

	_checkParticipantDelete: function(sParticipant) {
		gs.info('ServerSideTools._checkParticipantDelete sParticipant: ' + sParticipant);
		var grParticipantCategoryMap = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grParticipantCategoryMap.addQuery('badminton_m2m_players_tournaments', sParticipant);
		grParticipantCategoryMap.query();
		if (!grParticipantCategoryMap.next()) {
			this._setParticipant(sParticipant, '', '', false);
		} // if no participant category map
	},

	setPartner: function(grParticipantCategoryMap, grParticipantCategoryMapOld) {
		var sAction = grParticipantCategoryMap.operation();
		gs.info('ServerSideTools.setPartner cat map: ' + grParticipantCategoryMap.getDisplayValue() + ' sAction: ' + sAction);
		if (sAction == 'delete') {
			this._setParticipantCategoryMap(grParticipantCategoryMap.getValue('partner'), grParticipantCategoryMap.getValue('category'), '', false, false);
		} else if (grParticipantCategoryMap.getValue('partner')) {
			if ((grParticipantCategoryMapOld.getValue('partner')) && (grParticipantCategoryMap.getValue('partner') != grParticipantCategoryMapOld.getValue('partner'))) {
				this._setParticipantCategoryMap(grParticipantCategoryMap.getValue('partner'), grParticipantCategoryMap.getValue('category'), grParticipantCategoryMap.getValue('badminton_m2m_players_tournaments'), false, true);
				this._setParticipantCategoryMap(grParticipantCategoryMapOld.getValue('partner'), grParticipantCategoryMapOld.getValue('category'), '', false, false);
			} else if ((sAction == 'insert') || (!grParticipantCategoryMapOld.getValue('partner'))) {
				this._setParticipantCategoryMap(grParticipantCategoryMap.getValue('partner'), grParticipantCategoryMap.getValue('category'), grParticipantCategoryMap.getValue('badminton_m2m_players_tournaments'), false, true);
			} // if partner changed or added
		} else if (grParticipantCategoryMapOld.getValue('partner')) {
			this._setParticipantCategoryMap(grParticipantCategoryMapOld.getValue('partner'), grParticipantCategoryMapOld.getValue('category'), '', false, false);
		} // if partner
	},

	getPartnerQuery: function(sUser, sGender, sCat, sCatGender, sCatType, sTournament, iMaxChildAge) {
		var aQuery = [];
		if ((sCatGender) && (sCatGender != 'mixed')) {
			aQuery.push('user.gender=' + sCatGender);
		} else if (sCatGender == 'mixed') {
			aQuery.push('user.gender!=' + sGender);
		} else {
			aQuery.push('year>' + String(Number(new Date().getFullYear()) - iMaxChildAge));
		} // if gender same or mixed or child
		var aParticipant = [];
		aParticipant.push(sUser); // cannot select self
		var grParticipantCategoryMap = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grParticipantCategoryMap.addQuery('badminton_m2m_players_tournaments.tournament', sTournament);
		grParticipantCategoryMap.addQuery('category.type', sCatType);
		grParticipantCategoryMap.addNotNullQuery('partner');
		grParticipantCategoryMap.query();
		while (grParticipantCategoryMap.next()) {
			aParticipant.push(String(grParticipantCategoryMap.partner.player));
		} // each participant which has already a partner
		aQuery.push('sys_idNOT IN' + aParticipant.join(','));
		//gs.info('ServerSideTools.getPartnerQuery sUser: ' + sUser + ' sGender: ' + sGender + ' sCat: ' + sCat + ' sCatGender: ' + sCatGender + ' sTournament: ' + sTournament + ' query: ' + aQuery.join('^'));
		return aQuery.join('^');
	},

	getHeaderData: function(bLoggedIn, sUser, sPage) {
		gs.info('ServerSideTools.getHeaderData bLoggedIn: ' + bLoggedIn + ' sUser: ' + sUser + ' sPage: ' + sPage);
		var oRet = {success: '', info: '', message: '', title: '', bLoggedIn: false, user: sUser, userName: gs.getUserDisplayName(), html: '', redirect: ''};
		var grTournament = new GlideRecord('x_144441_badminton_tournament');
		grTournament.addActiveQuery();
		grTournament.orderByDesc('start_time');
		grTournament.query();
		if (grTournament.next()) {
			oRet.title = grTournament.getValue('short_description');
			oRet.html = grTournament.getValue('description');
			oRet.info = grTournament.address.getLabel() + '\n' + grTournament.getDisplayValue('address') + '\n';
			oRet.info += grTournament.start_time.getLabel() + ': ' + grTournament.getDisplayValue('start_time') + '\n';
			oRet.info += grTournament.end_time.getLabel() + ': ' + grTournament.getDisplayValue('end_time') + '\n';
		} else {
			oRet.title = gs.getMessage('Currently there is no active tournament!');
			oRet.info = gs.getMessage('Currently there is no active tournament!');
			oRet.message = gs.getMessage('Currently there is no active tournament!');
		} // if tournament
		if ((bLoggedIn) && (sPage == 'btp_login')) {
			oRet.redirect = '\bck?id=btp_overview';
		} // if already logged in and page is login
		return oRet;
	},

	validateEmail: function(sToken) {
		var oRet = {success: '', message: '', title: 'Validate Email Account', redirect: '\bck?id=btp_login'};
		if (sToken) {
			var sUserId = '';
			var grPlayer = new GlideRecord('x_144441_badminton_player');
			grPlayer.addQuery('token', sToken);
			grPlayer.query();
			if (grPlayer.next()) { 
				sUserId = grPlayer.getValue('user');
				grPlayer.setValue('token', '');
				if (grPlayer.update()) {
					var grUser = new GlideRecord('sys_user');
					if (grUser.get(sUserId)) {
						grUser.setValue('locked_out', false);
						if (grUser.update()) {
							oRet.success = gs.getMessage('Successfully Saved!');
						} // if user update
					} // if user
				} // if player update
			} // if valid player
		} // if token
		if (!oRet.success) {
			oRet.message = gs.getMessage('Validate Email Account failed!');
		} // if not success
		return oRet;
	},

	getAccountData: function(bLoggedIn, sUser, sAction) {
		var oRet = {success: '', info: '', message: '', title: 'Account', bLoggedIn: bLoggedIn, userfirst: '', userlast: '', useremail: '', usergender: '', useryear: '', redirect: ''};
		var grPlayer = new GlideRecord('x_144441_badminton_player');
		oRet.gdprlink = '?id=btp_gdpr';
		if (sAction == 'create') {
			oRet.title = gs.getMessage('Create Account');
			if (bLoggedIn == true) {
				oRet.title = gs.getMessage('Create Partner Account');
				oRet.gdprlink = '';
			} // if logged in
		} else if (bLoggedIn == false) {
			oRet.redirect("\bck?id=btp_login");
		} else {
			if (sAction == 'remove') {
				oRet.title = gs.getMessage('Remove Account');
				oRet.message = gs.getMessage('Please confirm account removal!');
				oRet.gdprlink = '';
			} else {
				oRet.title = gs.getMessage('Edit Account');
			} // if remove
			grPlayer.addQuery('user', sUser);
			grPlayer.query();
			if (grPlayer.next()) {
				oRet.playersysid = grPlayer.getUniqueValue();
				oRet.usersysid = String(grPlayer.user.sys_id);
				oRet.userfirst = grPlayer.user.first_name.getDisplayValue();
				oRet.userlast = grPlayer.user.last_name.getDisplayValue();
				oRet.useremail = grPlayer.user.email.getDisplayValue();
				oRet.usergender = String(grPlayer.user.gender);
				oRet.useryear = grPlayer.getValue('year');
			} else {
				oRet.redirect = '\bck?id=btp_overview';
			} // if user
		} // if action

		return oRet;
	},

	setAccountData: function(oInput, sAction) {
		gs.info('ServerSideTools.setAccountData sUser: ' + JSON.stringify(oInput) + ' sAction: ' + sAction);
		var oRet = {message: '', success: '', redirect: '?id=btp_overview'};
		if (oInput.action == 'submit') {
			var bInsert = true, bEmailChanged = false;
			var grUser = new GlideRecord('sys_user');
			var grPlayer = new GlideRecord('x_144441_badminton_player');
			if (oInput.usersysid) {
				grUser.get(oInput.usersysid);
			} else {
				grUser.addQuery('user_name', oInput.useremail);
				grUser.query();
				grUser.next();
			} // if userid
			if (grUser.isValidRecord()) {
				if (sAction == 'create') {
					oRet.message = gs.getMessage('User already exists, cannot insert!');
					return oRet;
				} // if create
				if (sAction == 'remove') {
					grUser.setValue('locked_out', true);
					oRet.message = gs.getMessage('User removed, logout now!');
					oRet.redirect = '/logout.do';
				} // if create
				if (oInput.playersysid) {
					grPlayer.get(oInput.playersysid);
				} else {	
					grPlayer.addQuery('user', grUser.getUniqueValue());
					grPlayer.query();
					grPlayer.next();
				} // if playerid
				if (grUser.getValue('email') != oInput.useremail) {
					bEmailChanged = true;
					var sToken = grPlayer.getUniqueValue() + GlideSecureRandomUtil.getSecureRandomString(10);
					grPlayer.setValue('token', sToken);
					grUser.setValue('locked_out', true);
				} // if email change
				bInsert = false;
			} // if new user
			grUser.setValue('user_name', oInput.useremail);
			grUser.setValue('first_name', oInput.userfirst);
			grUser.setValue('last_name', oInput.userlast);
			grUser.setValue('email', oInput.useremail);
			grUser.setValue('gender', oInput.usergender);
			grPlayer.setValue('name', oInput.userfirst + ' ' + oInput.userlast + ' (' + oInput.useryear + ')');
			grPlayer.setValue('year', oInput.useryear);
			grPlayer.setValue('gdpr_consent', oInput.gdprconsent);
			grPlayer.setValue('gdpr_consent_date', new GlideDateTime().getDisplayValue());
			grPlayer.setValue('gdpr_consent_ip', gs.getSession().getClientIP());
			if (bInsert) {
				grUser.insert();
				grPlayer.setValue('user', grUser.getUniqueValue());
				if (grPlayer.insert()) {
					if (oInput.bLoggedIn == true) {
						gs.eventQueue('x_144441_badminton.account_partner_creat', grPlayer, grUser.getValue('email'));
					} // if partner
				} // if insert
			} else {
				var sUpdateUser = grUser.update();
				var sUpdatePlayer = grPlayer.update();
				gs.info('ServerSideTools.setAccountData update sUpdateUser : ' + sUpdateUser + ' grUser: ' + grUser.getLastErrorMessage());
			} // if insert
			if (bEmailChanged) {
				gs.info('ServerSideTools.setAccountData email changed, user: ' + grUser.getValue('user_name') + ' email: ' + grUser.getValue('email') + ' token: ' + grPlayer.getValue('token') + ' active: ' + grUser.getValue('active'));
				gs.eventQueue('x_144441_badminton.account_email_verify', grPlayer, grUser.getValue('email'));
				oRet.redirect = '/logout.do';
			} // if email change
		} // if action
		if (!oRet.message) {
			oRet.success = gs.getMessage('Successfully Saved!');
		} // if no message
		gs.info('ServerSideTools.setAccountData oRet: ' + JSON.stringify(oRet));
		return oRet;
	}, // function set registration

	getRegistrationData: function(sUser) {
		//gs.info('ServerSideTools.getRegistrationData sUser: ' + sUser);
		var oRet = {success: '', info: '', message: '', title: '', user: '', gender: '', player: '', skilllevel: '', skilllevel_readonly: false, tournament: '', categories: []};
		oRet.user = sUser;
		var grUser = new GlideRecord('sys_user');
		grUser.get(oRet.user);
		oRet.gender = grUser.getValue('gender');
		var grPlayer = new GlideRecord('x_144441_badminton_player');
		grPlayer.addQuery('user', oRet.user);
		grPlayer.query();
		grPlayer.next();
		oRet.player = grPlayer.getUniqueValue();
		var grTournament = new GlideRecord('x_144441_badminton_tournament');
		grTournament.addActiveQuery();
		grTournament.query();
		if (!grTournament.next()) {
			oRet.title = gs.getMessage('Currently there is no active tournament');
			oRet.message = gs.getMessage('Currently there is no active tournament');
			return oRet;
		} // if tournament
		oRet.tournament = grTournament.getUniqueValue();
		oRet.max_child_age = grTournament.getValue('max_child_age');
		oRet.title = gs.getMessage('Registration for') + ' ' + grTournament.getValue('short_description');
		var grParticipant = new GlideRecord('x_144441_badminton_m2m_players_tournaments');
		grParticipant.addQuery('player', grPlayer.getUniqueValue());
		grParticipant.addQuery('tournament', oRet.tournament);
		grParticipant.query();
		grParticipant.next();
		var grRegisteredCategories;
		var grCategories = new GlideRecord('x_144441_badminton_m2m_categories_tournaments');
		grCategories.addQuery('tournament', oRet.tournament);
		grCategories.query();
		var sTmpQuery = '';
		var oPartner = {};
		var aPartnerCategories = [];
		var sSkillLevel = '';
		var bSelected = false;
		var bReadonly = false;
		while (grCategories.next()) {
			bSelected = false;
			bReadonly = false;
			sTmpQuery = '';
			oPartner = {name: 'partner'};
			if (grCategories.category.type == 'double') {
				sTmpQuery =  this.getPartnerQuery(oRet.player, oRet.gender, grCategories.category.sys_id, grCategories.category.gender, grCategories.category.type, oRet.tournament, oRet.max_child_age);
			} // if double
			grRegisteredCategories = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
			grRegisteredCategories.addQuery('badminton_m2m_players_tournaments', grParticipant.getUniqueValue());
			grRegisteredCategories.addQuery('category', grCategories.category);
			grRegisteredCategories.query();
			if (grRegisteredCategories.next()) {
				bSelected = true;
				if ((grCategories.category.type == 'double') && (grRegisteredCategories.getValue('main_contact') == false)) {
					oRet.info = gs.getMessage('You have already been registered by a partner for the double competion. Only your partner can change this registration.');
					bReadonly = true;
					aPartnerCategories.push({gender: grCategories.category.gender, skilllevel: grCategories.category.skilllevel});
				} else {
					oRet.skilllevel_readonly = true;
				} // if partner registered
				sSkillLevel = (sSkillLevel) ? sSkillLevel : String(grCategories.category.skilllevel);
				oPartner = {name: 'partner', displayValue: String(grRegisteredCategories.partner.player.name), value: String(grRegisteredCategories.partner.player.sys_id)};
			} // if registered
			oRet.categories.push({readonly: bReadonly, id: String(grCategories.category), name: grCategories.category.getDisplayValue('name'), gender: String(grCategories.category.gender), skilllevel: String(grCategories.category.skilllevel), type: String(grCategories.category.type), partner: oPartner, selected: bSelected, query: sTmpQuery});
		} // while categories in tournament
		for (var i = oRet.categories.length - 1; i >= 0; --i) {
			for (var ii = aPartnerCategories.length - 1; ii >= 0; --ii) {
				if ((oRet.categories[i].type == 'double') && (oRet.categories[i].gender == aPartnerCategories[ii].gender) && (oRet.categories[i].skilllevel != aPartnerCategories[ii].skilllevel)) {
					oRet.categories.splice(i,1);
				} // if found remove
			} // for partner categories
		} // for categories
		oRet.skilllevel = sSkillLevel;
		//gs.info('ServerSideTools.getRegistrationData oRet: ' + JSON.stringify(oRet));	
		return oRet;
	}, // function get registration


	setRegistrationData: function(oInput) {
		//gs.info('ServerSideTools.setRegistrationData sUser: ' + JSON.stringify(oInput));
		var oRet = {message: '', success: ''};
		var _fnSetParticipant = this._setParticipant;
		var _fnSetParticipantCategoryMap = this._setParticipantCategoryMap;
		var sParticipant = '';
		var sPartner = '';
		var oRegisteredSingleCategory = {};
		var oRegisteredDoubleCategory = {};
		var aRegisteredDoubleCategories = [];
		var aValidRegisteredCategoryMaps = [];
		oInput.categories.forEach(function(oCategory) {
			if (oCategory.selected == true) {
				if (oCategory.type == 'single') {
					oRegisteredSingleCategory.category = oCategory.id;
				} else if (oCategory.readonly == false) {
					oRegisteredDoubleCategory.category = oCategory.id;
					oRegisteredDoubleCategory.partner = oCategory.partner.value;
					aRegisteredDoubleCategories.push(oRegisteredDoubleCategory);
				} // if single
			} // if selected and not readonly
		}); // for each category
		var bParticipantActive = ((oRegisteredSingleCategory.category) || (aRegisteredDoubleCategories.length > 0)) ? true : false;
		gs.info('ServerSideTools.setRegistrationData bParticipantActive: ' + bParticipantActive);
		sParticipant = _fnSetParticipant('', oInput.player, oInput.tournament, bParticipantActive);
		if (oRegisteredSingleCategory.category) {
			aValidRegisteredCategoryMaps.push(_fnSetParticipantCategoryMap(sParticipant, oRegisteredSingleCategory.category, '', true, bParticipantActive));
		} // if single
		aRegisteredDoubleCategories.forEach(function(oRegisteredDoubleCategory) {
			if (oRegisteredDoubleCategory.partner) {
				sPartner = _fnSetParticipant('', oRegisteredDoubleCategory.partner, oInput.tournament, true);
				aValidRegisteredCategoryMaps.push(_fnSetParticipantCategoryMap(sParticipant, oRegisteredDoubleCategory.category, sPartner, true, true));
			} else {
				aValidRegisteredCategoryMaps.push(_fnSetParticipantCategoryMap(sParticipant, oRegisteredDoubleCategory.category, '', true, true));
			} // if partner
		}); // each double
		gs.info('ServerSideTools.setRegistrationData aValidRegisteredCategoryMaps: ' + aValidRegisteredCategoryMaps);
		grRegisteredCategories = new GlideRecord('x_144441_badminton_m2m_categories_badminton_m2');
		grRegisteredCategories.addQuery('badminton_m2m_players_tournaments', sParticipant);
		grRegisteredCategories.addQuery('main_contact', true);
		grRegisteredCategories.addEncodedQuery('sys_idNOT IN' + aValidRegisteredCategoryMaps.join(','));
		grRegisteredCategories.query();
		while (grRegisteredCategories.next()) {
			gs.info('ServerSideTools.setRegistrationData remove: ' + grRegisteredCategories.getDisplayValue());
			if (!grRegisteredCategories.deleteRecord()) {
				oRet.message += gs.getMessage('Error removing registration!') + '\n';
			} // if not success
		} // while remove
		if (!oRet.message) {
			oRet.success = gs.getMessage('Successfully Saved!');
		} // if no message
		//gs.info('setRegistrationData oRet: ' + JSON.stringify(oRet));
		return oRet;
	}, // function set registration


	type: 'ServerSideTools'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom</sys_created_by>
        <sys_created_on>2018-06-12 06:25:27</sys_created_on>
        <sys_id>f982bb03372a130045d9ae7873990e7c</sys_id>
        <sys_mod_count>195</sys_mod_count>
        <sys_name>ServerSideTools</sys_name>
        <sys_package display_value="Badminton Tournament Planner" source="x_144441_badminton">681664313722130045d9ae7873990e88</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Badminton Tournament Planner">681664313722130045d9ae7873990e88</sys_scope>
        <sys_update_name>sys_script_include_f982bb03372a130045d9ae7873990e7c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-09 14:21:39</sys_updated_on>
    </sys_script_include>
</record_update>
